// Generated by CoffeeScript 1.6.3
var SourceMapConsumer, SourceMapGenerator, path, readFileSync, writeFileSync, _ref, _ref1;

_ref = require('fs'), readFileSync = _ref.readFileSync, writeFileSync = _ref.writeFileSync;

path = require('path');

_ref1 = require('source-map'), SourceMapConsumer = _ref1.SourceMapConsumer, SourceMapGenerator = _ref1.SourceMapGenerator;

exports.cat = function(inputMapFiles, outJSFile, outMapFile, prepend, append) {
  var buffer, f, generator, lineOffset, map, src, srcPath, _i, _len, _ref2;
  buffer = [];
  generator = new SourceMapGenerator({
    file: outJSFile
  });
  lineOffset = 0;
  if (prepend) {
    buffer.push(prepend);
    lineOffset += (((_ref2 = prepend.match(/\n/)) != null ? _ref2.length : void 0) || 0) + 1;
  }
  for (_i = 0, _len = inputMapFiles.length; _i < _len; _i++) {
    f = inputMapFiles[_i];
    if (path.extname(f) === '.map') {
      map = new SourceMapConsumer(readFileSync(f, 'utf-8'));
      srcPath = path.join(path.dirname(f), map.file);
    } else {
      map = null;
      srcPath = f;
    }
    src = readFileSync(srcPath, 'utf-8');
    src = src.replace(/\r?\n\/\/[@#]\ssourceMappingURL[^\r\n]*/g, '');
    buffer.push(src);
    if (map != null) {
      map.eachMapping(function(mapping) {
        var origSrc;
        origSrc = path.join(path.dirname(f), mapping.source);
        mapping = {
          generated: {
            line: mapping.generatedLine + lineOffset,
            column: mapping.generatedColumn
          },
          original: {
            line: mapping.originalLine,
            column: mapping.originalColumn
          },
          source: path.relative(path.dirname(outMapFile), origSrc)
        };
        return generator.addMapping(mapping);
      });
    }
    lineOffset += src.split('\n').length;
  }
  if (append) {
    buffer.push(append);
  }
  buffer.push("//# sourceMappingURL=" + (path.relative(path.dirname(outJSFile), outMapFile)));
  writeFileSync(outJSFile, buffer.join('\n'), 'utf-8');
  return writeFileSync(outMapFile, generator.toString(), 'utf-8');
};
